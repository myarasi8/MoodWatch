[{"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/index.js":"1","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/App.js":"2","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/reportWebVitals.js":"3","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/twitter.js":"4","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/movie.js":"5","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/AppRouter.js":"6","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/header.js":"7","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/config/keys.js":"8"},{"size":500,"mtime":1609025682917,"results":"9","hashOfConfig":"10"},{"size":259,"mtime":1611695993146,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1607881349893,"results":"12","hashOfConfig":"10"},{"size":2109,"mtime":1611696420566,"results":"13","hashOfConfig":"10"},{"size":2867,"mtime":1611698067231,"results":"14","hashOfConfig":"10"},{"size":331,"mtime":1610901925033,"results":"15","hashOfConfig":"10"},{"size":938,"mtime":1611699782435,"results":"16","hashOfConfig":"10"},{"size":133,"mtime":1611698008668,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1rj3jch",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/index.js",[],["38","39"],"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/App.js",["40","41","42"],"import './App.css';\nimport AppRouter from './AppRouter';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppRouter />\n    </Router>\n    // <Movie />\n  );\n}\n\nexport default App;\n","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/reportWebVitals.js",[],"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/twitter.js",[],"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/movie.js",["43"],"import React, { useEffect, useState } from 'react'\nimport KEYS from \"./config/keys\"\n\nfunction Movie(props) {\n    const movieAPIKey = KEYS.MOVIE_API_KEY\n    const baseUrl = 'http://image.tmdb.org/t/p/w185/'\n    const [movies, setMovies] = useState([]);\n    const emotion = props.emotion\n    const genres = {\n        \"Action\": 28,\n        \"Adventure\": 12,\n        \"Animation\": 16,\n        \"Comedy\": 35,\n        \"Crime\": 80,\n        \"Documentary\": 99,\n        \"Drama\": 18,\n        \"Family\": 10751,\n        \"Fantasy\": 14,\n        \"History\": 36,\n        \"Mystery\": 9648,\n        \"Romance\": 10749,\n        \"SciFi\": 878,\n        \"TV Movie\": 10770,\n        \"Thriller\": 53,\n        \"War\": 10752,\n        \"Western\": 37\n    }\n\n    let url = \"https://api.themoviedb.org/3/discover/movie?api_key=\" + movieAPIKey + \"&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=\"\n\n    switch(emotion) {\n        case \"joy\":\n            url += genres.Action\n            break;\n        case \"sadness\":\n            url += genres.Comedy\n            break; \n        default:\n            url += genres.SciFi\n            break;   \n    }\n\n    const getMovies = (url) => {\n        fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to fetch')\n            }\n            return response.json()\n        })\n        .then(response => {\n            console.log(response.results)\n            const movieArray = shuffle(response.results).slice(0, 5).map(movie => {\n                return movie\n            })\n            \n            setMovies(movieArray)            \n        })\n        .catch((e) => {\n            console.log('Caught error', e)\n        })\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n      }\n\n    return (\n        <div>\n            <p>You should watch one of these movies</p>\n            <span data-testid=\"display\">\n            {\n                movies.map((movie, index) => {\n                    // return (<li key={index}>{movie}</li>)\n                    return (<img key={index} src={baseUrl + movie.poster_path} alt={movie.title}/>)\n                })\n            }\n            </span><br/>\n            <button data-testid=\"button1\" onClick={() => getMovies(url)}>Click Me</button>\n        </div>\n    );\n}\n\nexport default Movie;\n","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/AppRouter.js",[],"/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/header.js",["44","45"],"import { Link } from \"react-router-dom\";\nimport React, { useEffect, useState } from 'react'\n\nfunction Header(props) {\n    const handleSignInClick = () => {\n        // Authenticate using via passport api in the backend\n        // Open Twitter login page\n        // Upon successful login, a cookie session will be stored in the client\n        window.open(\"http://localhost:4000/auth/twitter\", \"_self\");\n    };\n\n    const handleLogoutClick = () => {\n        // Logout using Twitter passport api\n        // Set authenticated state to false in the HomePage\n        window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n    };\n\n    return (\n      <ul className=\"menu\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        {props.authenticated ? (\n          <li onClick={handleLogoutClick}>Logout</li>\n        ) : (\n          <li onClick={handleSignInClick}>Login</li>\n        )}\n      </ul>\n    );\n}\nexport default Header;","/Users/maheshyarasi/Documents/moodwatch/mood_watch/client/src/config/keys.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":3,"column":35,"nodeType":"52","messageId":"53","endLine":3,"endColumn":41},{"ruleId":"50","severity":1,"message":"54","line":3,"column":43,"nodeType":"52","messageId":"53","endLine":3,"endColumn":48},{"ruleId":"50","severity":1,"message":"55","line":3,"column":50,"nodeType":"52","messageId":"53","endLine":3,"endColumn":54},{"ruleId":"50","severity":1,"message":"56","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":26},{"ruleId":"50","severity":1,"message":"56","line":2,"column":17,"nodeType":"52","messageId":"53","endLine":2,"endColumn":26},{"ruleId":"50","severity":1,"message":"57","line":2,"column":28,"nodeType":"52","messageId":"53","endLine":2,"endColumn":36},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]